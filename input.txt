trait Future {
  type Output;
  fn poll(&mut self,walker:fn())->Poll<Self::Output>;
}

pub enum Poll<T>{
    Pending,
    Ready(T)
}

struct SocketStream<'a>{
    socket:&'a Socket,
}

impl Future for SocketStream<'_>{
    type Output=Vec<u8>;
    fn poll(&mut self, walker:fn())->Poll<Self::Output>{
        if let Some(data) = self.get_data(){
            Poll::Read(data)
        }else{
            self.set_call_back(walker);
            Poll::Pending;
        }
    }
}

struct TimerFuture{
    state:Arc<Mutex<SharedState>>,
}

#[derive(Default)]
struct SharedState{
    completed bool,
    waker: Option<Waker>,
}

impl Future for TimerFuture{
    Output= ();
    fn poll(self:Pin<&mut self> , context:&mut Context<'_>)->Poll<Self::Output>{
        let mut guard = self.state.lock().unwrap();
        if guard.completed{
            Poll::Ready(())
        }else{
            guard.waker = Some(context.waker());
            Poll::Pending
        }
    }
}

impl TimerFuture{
    pub fn new(duration:Duration)->Self{
        let state = Arc::new(Mutex::new(SharedState::default()));
        let state_copy = state.clone();
        let _= std::thread::spwan(move ||{
            std::thread::sleep(duration);
            let state_copy = state_copy.lock().unwrap();
            state_copy.completed = true;
            if let Some(waker) = state_copy.waker{
                waker.wake();
            }
            state.waker = None;
         });
    }
}