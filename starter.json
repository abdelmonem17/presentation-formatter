{
    "title":"Learn rust with NEAR",
    "text"  : "",
    "sections":[
      {
        "title": "Variables and constant",
        "text":"Rust has variables like any other language such as primative and non-primative and there are some special features we will disscus them one by one.",
        "pages" : [
            {
              "title": "[struct](https://doc.rust-lang.org/book/ch05-01-defining-structs.html)",
               "code" :"",
              "text":  "Rust doesn't have classes but instead struct to define a container for data like in these line of code we define a struct with two variables 'token' and 'metadata'."
            },
            {
               "title":  "[enum](https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html)",
               "code" :"",                 
               "text":  "Rust has enums to give names to const variables in additions other featurs we will explore them in next lessons like in this code we define new type called 'StorageKey' with two possibilities 'FungibleToken' and 'Metadata'."
            },
            {
                "title": "[const](https://doc.rust-lang.org/std/keyword.const.html)",
                "code" :"", 
                "text": "Rust has compile time const that recommended to be used with values that used many times in addition to it gives readablity for the code, for example here we define a const for image csv value that might be used many times in the program."
            }
        ]
          
      },
      {
        "title": "functions",
        "text":"like any other language you can define some reusable code and it is called function.",
        "pages" : [
            {
                "title": "function definition and calling",
                "code" : "",
                "text" : "here we are defining a function with name 'get_context', parameter and return type, also at lines 111th to 114 we call functions in a variable called 'builder' and they are [instance functions](https://turreta.com/2019/10/14/static-and-instance-methods-in-struct/) but we will learn them in the next section."
            }
        ]
          
      },
      {
        "title": "impl section, and static and instance functions",
        "text":"Rust is not object oriented language but you can define structs as data container and attach function to operate on this data, also you can do the same for enums.",
        "pages" : [
            {
                "title": "[impl](https://doc.rust-lang.org/std/keyword.impl.html)",
                "code" : "",
                "text":  "here we start to write function to manipulate the derived type"
            },
            {
                "title": "[static function](https://turreta.com/2019/10/14/static-and-instance-methods-in-struct/)",
                "code" : "",
                "text": "inside impl block we can define a static function like this so it can be called from the type itself, here we return [Self](https://stackoverflow.com/questions/32304595/whats-the-difference-between-self-and-self) from the function so here we refere to the current type."
            },
            {
                "title": "[static function](https://turreta.com/2019/10/14/static-and-instance-methods-in-struct/) call",
                "code" : "",
                "text": "here we call a static function 'new' in the type 'VMContextBuilder' and this is widly used method to create a new instance because Rust doesn't have constractor."
            },
            {
                "title": "[instance function](https://turreta.com/2019/10/14/static-and-instance-methods-in-struct/)",
                "code" : "",
                "text" : "inside impl block we can define instance function like this code defines function that takes parameters in addition to '& mut [self](https://doc.rust-lang.org/std/keyword.self.html)', rust introduce new concept called [mutability](https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html) so here we borrow mutable refrence for the current object so that the function can edit on it."
            },
            {
                "title": "instance function and immutable reference",
                "code" : "",
                "text" : "here we define an instance function with '&self' this means the function [borrows](https://doc.rust-lang.org/rust-by-example/scope/borrow.html) the current object for readonly like in first line we use it to get data from the current object"
            },
            {
                "title": "instance function calling",
                "code" : "",
                "text": "line 112 to 114 calling instance function on the variable 'builder' and these lines follows [builder pattern](https://doc.rust-lang.org/1.0.0/style/ownership/builders.html)"
            }
        ]
          
      },
      {
        "title": "[ownership](https://doc.rust-lang.org/rust-by-example/scope/move.html) and [borrowing](https://doc.rust-lang.org/rust-by-example/scope/borrow.html)",
        "text": "rust has unique concept called ownership and borrowing so when you assign variables to anther so most of the time instead of copying, the ownership taken by the second variable, so we can use borrowing and other things so keep the origin variable",
        "pages" : [
            {
                "title": "[Clone](https://doc.rust-lang.org/std/clone/trait.Clone.html) and ownership",
                "code" : "",
                "text" : "as we mention when we use a varable in passing to function or to assign anther variable so the ownership is transfered and the origin variable move and this exist with non-primative types unless they implement [Copy trait](https://doc.rust-lang.org/std/marker/trait.Copy.html), so here we use clone function to make a copy of data and so as not to be moved and reused after that"            }
        ]
          
      },
      {
        "title": "[testing in rust](https://doc.rust-lang.org/book/ch11-01-writing-tests.html)",
        "text":"Tests are Rust functions that verify that the non-test code is functioning in the expected manner.",
        "pages" : [
            {
                "title": "unit test",
                "code" : "",
                "text": "so here we writing a function and anntotate it as test like in line 118, and we use assertion funtions like at lines 124 and 125"
            }
        ]
          
      },
      {
        "title": "[modules](https://doc.rust-lang.org/rust-by-example/mod.html) and [imports](https://doc.rust-lang.org/reference/items/use-declarations.html)",
        "text":"Rust structure it's code in modules so you can have mutliple files in your projects.",
        "pages" : [
            {
                "title": "importing from other crates",
                "code" : "",
                "text": "these lines imports struct types from other crates that must be mentioned as a dependence in [Cargo.toml](https://doc.rust-lang.org/cargo/reference/manifest.html)."
            },
            {
                "title": "modules",
                "code" : "",
                "text": "we can define new module in rust to structure our code, here we declaring a module at line 101 ,and at line 100 we annotate that it is a test module and use a [compile time switch](https://doc.rust-lang.org/reference/conditional-compilation.html) to compile this module only at non-WASM platform."
            }
        ]
          
      },
      {
        "title": "[macros](https://doc.rust-lang.org/book/ch19-06-macros.html)",
        "text":"Macros are widly used in metaprogramming for generating code at compile time.",
        "pages" : [
            {
                "title": "[procedure macro](https://doc.rust-lang.org/reference/procedural-macros.html)",
                "code" : "",
                "text": "procedure macros allow creating syntax extentions like at first line we attribute the that this struct should generate some code for near, second line [derive-macro](https://doc.rust-lang.org/reference/attributes/derive.html) to generate implementation for these traits instead of making custom implementation for them.[BorshDeserialize](https://docs.rs/borsh/latest/borsh/de/trait.BorshDeserialize.html), [BorshSerialize](https://docs.rs/borsh/latest/borsh/de/trait.BorshSerialize.html) are used to convert to and from object and binary value but Serialize and Deserialize are used to convert to and from object and json value."
            },
            {
                "title": "[macro rules](https://doc.rust-lang.org/rust-by-example/macros.html)",
                "code" : "",
                "text": "macro rules it is a macro like function but evaluated at compile time in addition to have ability to generate codes, this line call macro and as we see it is like call but have '!' so here we call macro called 'log' to log some information to be traced later"
            }
        ]
          
      }
    ]
  
  }
  
              
  
              
                         
  